# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI V2

on:
  # push:
  #   branches: ['master']
  pull_request:
    branches: ['master']
  # Allows you to run this workflow manually from the Actions tab 
  workflow_dispatch:

env:
  AWS_REGION: ${{secrets.MY_AWS_REGION}}                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ${{secrets.MY_ECR_REPOSITORY}}           # set this to your Amazon ECR repository name
  ECS_SERVICE: ${{secrets.MY_ECS_SERVICE}}                 # set this to your Amazon ECS service name
  ECS_CLUSTER: ${{secrets.MY_ECS_CLUSTER}}                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ${{secrets.MY_ECS_TASK_DEFINITION}} # set this to the path to your Amazon ECS task definition
                                                           # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: ${{secrets.MY_CONTAINER_NAME}}           # set this to the name of the container in the
                                                           # containerDefinitions section of your task definition

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: production

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main
      
      - name: Set up Build Time environment variables
        env: 
          NEXT_PUBLIC_VARIABLE_ONE: ${{ secrets.NEXT_PUBLIC_VARIABLE_ONE }}
          NEXT_PUBLIC_VARIABLE_TWO: ${{ env.NEXT_PUBLIC_VARIABLE_TWO }}
          ENV: ${{ env }}
        run: |
          echo "NEXT_PUBLIC_VARIABLE_ONE=${NEXT_PUBLIC_VARIABLE_ONE}" >> .env
          echo "NEXT_PUBLIC_VARIABLE_TWO=${NEXT_PUBLIC_VARIABLE_TWO}" >> .env
          echo "ENV=${env}" >> .env
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

#       - name: Build, tag, and push docker image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
#           ECR_IMAGE_TAG: ${{ github.sha }}
#           VERSION: ${{steps.package-version.outputs.current-version}}
#         run: |
#           # Build a docker container and
#           # push it to ECR so that it can
#           # be deployed to ECS.
#           # During Build, We need to pass in Build Time Environment Variable to --build-arg 
#           # -ENV in Docker context is meant for Run time Environment Variable
#           docker build \
#             --build-arg NEXT_PUBLIC_VARIABLE_ONE=${NEXT_PUBLIC_VARIABLE_ONE} \
#             --build-arg NEXT_PUBLIC_VARIABLE_TWO=${NEXT_PUBLIC_VARIABLE_TWO} \
#             -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION .
#           docker push -a $ECR_REGISTRY/$ECR_REPOSITORY
#           echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$VERSION" >> $GITHUB_OUTPUT

#   deploy:
#     name: Deploy
#     runs-on: ubuntu-latest
#     environment: production

#     steps:
#       - name: Fill in the new image ID in the Amazon ECS task definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
#         with:
#           task-definition: ${{ env.ECS_TASK_DEFINITION }}
#           container-name: ${{ env.CONTAINER_NAME }}
#           image: ${{ steps.build-image.outputs.image }}
      
#       - name: Deploy Amazon ECS task definition
#         id: ecs-deploy
#         uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: ${{ env.ECS_SERVICE }}
#           cluster: ${{ env.ECS_CLUSTER }}
#           wait-for-service-stability: true
